- name: Install uwsgi and python and other dependencies
  apt: pkg=uwsgi,uwsgi-plugin-python3,virtualenv,python-pip,libpq-dev,nodejs,npm,gettext,libjpeg-dev state=installed update_cache=true
  become: yes
  become_user: root

- name: Update git repo
  git:
    repo={{ git_repo }}
    dest={{ project_dir }}
    version=master
    accept_hostkey=True
  notify: reload uwsgi
  tags: deploy

- name: Create virtualenv and install dependencies
  pip: requirements={{ project_dir}}/requirements/base.txt virtualenv={{ root_dir }}/venv virtualenv_python=python3
  tags: deploy

# uwsgi configuratrion
- name: Create uwsgi config file
  template: src=default.ini dest=/etc/uwsgi/apps-available/default.ini
  become: yes
  become_user: root
  notify: restart uwsgi

- name: Symlink uwsgi config file
  file: src=/etc/uwsgi/apps-available/default.ini dest=/etc/uwsgi/apps-enabled/default.ini state=link
  become: yes
  become_user: root
  notify: restart uwsgi

# Django configuration
- name: Check SECRET_KEY file stat
  stat: path={{ project_dir }}/envdir/SECRET_KEY
  register: secret_key_file

- name: Generate SECRET_KEY file if it does not exist yet
  shell: cat /dev/urandom | tr -dc "abcdefghijklmnopqrstuvwxyz0123456789!@#\$%^&*(-_=+)" | head -c 100 > {{ project_dir }}/envdir/SECRET_KEY
  when: not secret_key_file.stat.exists
  notify: restart uwsgi

- name: Generate envdir entries
  copy: dest={{ project_dir }}/envdir/{{ item.setting }} content={{ item.value }}
  with_items:
    - {setting: "DATABASE_URL", value: "postgres://{{ project_name }}:{{ lookup('password', 'auth/database.password') }}@{{ database_host }}/{{ project_name }}"}
    - {setting: "MEDIA_ROOT", value: "{{ root_dir }}/media"}
    - {setting: "STATIC_ROOT", value: "{{ root_dir }}/static"}
    - {setting: "MEDIA_URL", value: "http://{{ domain }}{% if webserver_port != 80 %}:{{ webserver_port }}{% endif %}/media/"}
    - {setting: "STATIC_URL", value: "http://{{ domain }}{% if webserver_port != 80 %}:{{ webserver_port }}{% endif %}/static/"}
    - {setting: "ALLOWED_HOSTS", value: "{{ domain }}"}
    - {setting: "DJANGO_SETTINGS_MODULE", value: "{{ project_name }}.settings.base"}
  notify: restart uwsgi

# Static files
- name: Install NPM dependencies
  npm: path={{ project_dir }}
  tags: deploy

- name: Collect static files
  django_manage: command="collectstatic --noinput" app_path={{ project_dir }} virtualenv={{ root_dir }}/venv/
  tags: deploy

# Database
- name: Migrate database
  django_manage: command="migrate --noinput" app_path={{ project_dir }} virtualenv={{ root_dir }}/venv/
  tags: deploy


# Translations
- name: Compile translation files
  django_manage: command="compilemessages" app_path={{ project_dir }} virtualenv={{ root_dir }}/venv/
  when: translations
  tags: deploy
